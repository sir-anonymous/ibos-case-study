--- Rules are marked, as terms, for efficiency reasons as explained in marked-term.maude.
--- They come in two fashions: indexed by a number (sort IMRule), and unindexed (sort MRule).
--- In the congruence closure algorithm, indexed rules will always be inter-reduced, whereas
--- unindexed rules will be equations still to be processed.  An unindexed rule can be created
--- and oriented as terminating by the function "make-rule(T,T')" which produces the mt-rule
--- error when T and T' are equal modulo axioms and otherwise orients them by a simplification
--- order total on ground terms modulo the given axioms.
---
--- Since congruence closure can be more efficient by first processing rules with small righthand
--- sides, a lexicographic order based on the two sizes of an unindexed rule is defined.

fmod MARKED-RULE is protecting AAC-RPO .
                    protecting MARKED-TERM .
                    protecting NAT .
                    protecting META-LEVEL .
                    protecting QIDPAIRSET-TERMAPPLY .
                    protecting MGCI .

  sorts MRule IMRule GroundTermPair .

  op [_]_        : Nat   MRule -> IMRule [ctor] .
  op _=>_        : MTerm MTerm -> MRule  [ctor] .
  op [_,_]       : GroundTerm GroundTerm -> GroundTermPair [ctor] .
  op mt-mrule    : -> MRule [ctor] .

  op make-rule   : Module Module QidPairSet Substitution Bool GroundTerm GroundTerm -> MRule .
  ops left right : MRule -> [GroundTerm] .  --- undefined for mt-rule
  op _<_         : MRule MRule -> Bool .

  vars T T' T'' T''' : GroundTerm .
  vars S S' S'' S''' : SetM{Qid} .
  vars i j n m k l : Nat .
  var MR : MRule .
  var U CU : Module .
  var QPS : QidPairSet .
  var B : Bool .
  var SUB : Substitution .

  eq left(T [n,S] => T' [m,S']) = T .
  eq right(T [n,S] => T' [m,S']) = T' .

  --- NB: if boolean flag is true, then order the equality using a total order
  ---     comprised of the term size + AAC-RPO ordering; otherwise, just use the
  ---     the AAC-RPO ordering
  eq make-rule(U,CU,QPS,SUB,B,T,T') = if getTerm(metaReduce(U,T)) == getTerm(metaReduce(U,T'))
                             then mt-mrule
                             else if B and-then  size(size&ops(T)) > size(size&ops(T'))
                               then T size&ops(T) => T' size&ops(T')
                               else if B and-then size(size&ops(T')) > size(size&ops(T))
                                 then  T' size&ops(T') =>  T size&ops(T)
                                 else if orientDefToCtor(specialConst?(T),specialConst?(T'),T,T') =/= mt-mrule
                                   then orientDefToCtor(specialConst?(T),specialConst?(T'),T,T')
                                   else if orientDefToCtor(CU,QPS,T,T') =/= mt-mrule
                                     then orientDefToCtor(CU,QPS,T,T')
                                     else if T >AAC{U} T'
                                       then T size&ops(T) => T' size&ops(T')
                                       else T' size&ops(T') =>  T size&ops(T) fi fi fi fi fi fi .

  eq mt-mrule < T [n,S] => T' [m,S'] = true . --- smaller righthand sides first preferred, then smaller lefthands
  eq MR < mt-mrule = false .
  eq T [n,S] => T' [m,S'] < T'' [k,S''] => T''' [l,S'''] = if (m < l)
                                                              then true
                                                              else if m == l
                                                                       then (n < k)
                                                                       else false
                                                                   fi
                                                           fi .

  --- HACK: orient towards these constants which are known to be bottom of the hierarchy;
  ---       these names are hard-coded for IBOS
  op specialConst? : Term -> Bool .
  eq specialConst?(C:Constant) = C:Constant in ('trueKind#1.U ; 'falseKind#1.U) .
  eq specialConst?(T)          = false .

  op orientDefToCtor : Module QidPairSet Term Term -> MRule .
  eq orientDefToCtor(CU,QPS,T,T') = orientDefToCtor(ctor-term?(CU,apply(QPS,true,T)),ctor-term?(CU,apply(QPS,true,T')),T,T') .

  op orientDefToCtor : Bool Bool Term Term -> MRule .
  eq orientDefToCtor(true, false,T,T') = T' size&ops(T') => T  size&ops(T) .
  eq orientDefToCtor(false,true, T,T') = T  size&ops(T') => T' size&ops(T) .
  eq orientDefToCtor(true, true, T,T') = mt-mrule .
  eq orientDefToCtor(false,false,T,T') = mt-mrule .
endfm

view IMRule from TRIV to MARKED-RULE is
  sort Elt to IMRule .
endv

view MRule< from STRICT-WEAK-ORDER to MARKED-RULE is
  sort Elt to MRule .
endv

view GroundTermPair from TRIV to MARKED-RULE is
  sort Elt to GroundTermPair .
endv
