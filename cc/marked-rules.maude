--- Two data structures for rules used in congruence closure are defined: (i) "LIST{IMRule}" will be used
--- to keep inter-reduced rules in a list, (ii) "INSERT{MRule<}" is used to keep unprocessed rules in a sorted list.
---
--- In addition, a function "make-rules" generates a list "rules" from the meta-representation of the user-specified
--- "equations", and a "remove" function eliminates an indexed rule given the index.

fmod INSERT{X :: STRICT-WEAK-ORDER} is
   protecting WEAKLY-SORTABLE-LIST{X} .

  vars E E' : X$Elt .
  vars L L' : List{X} .

  op ins : X$Elt List{X} -> List{X} .        --- inserts elt in list, assumed sorted
  op ins-rec : List{X} List{X} -> List{X} .  --- inserts elts of 1st list in 2nd list, assumed sorted

  eq ins(E,nil) = E .
  eq ins(E,E' L') = if (E' < E)  then  (E' ins(E,L'))  else (E E' L') fi .
  eq ins-rec(E L,E' L') =  ins-rec(L,ins(E,E' L')) .
  eq ins-rec(nil,L') = L' .
endfm

fmod MARKED-RULES is
  protecting MARKED-RULE .
  protecting INSERT{MRule<} .
  protecting LIST{IMRule} .

  var MRL : List{MRule<} . var IMRL : List{IMRule} . var MR : MRule .
  vars T T' T'' T''' : GroundTerm . var TL : GroundTermList .
  vars i j n m k l : Nat . vars S S' S'' S''' : SetM{Qid} .
  var U : Module . var O1 O2 : Qid . var IT : Term .

  --- generates sorted rule list from the user-specified ground equations
  op process-rules : List{MRule<} -> List{MRule<} [memo] .
  eq process-rules(MRL) = clean(sort(MRL)) .

  --- removes mt-rule prefixes
  op clean : List{MRule<} -> List{MRule<} .
  eq clean(nil) = nil .
  eq clean(mt-mrule MRL) = clean(MRL) .
  eq clean(MRL) = MRL [owise] .

  --- assumes [i] MR occurs only once in the rule list
  op remove : Nat List{IMRule} -> List{IMRule} .
  eq remove(i,nil) = nil .
  eq remove(i,([j] MR) IMRL) = if i == j then IMRL else ([j] MR) remove(i,IMRL) fi .
endfm
