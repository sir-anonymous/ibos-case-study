fmod CONG-CLOSURE-SHARED-IMPL is
  pr PROCESS .
  pr CRITICAL-PAIR .

  var AS : AttrSet .
  var E : Equation .
  var ES ES' : EquationSet .
  var T T' TES : Term .
  var U : Module .
  var M M' : Marking .
  var MRL MRL' : List{MRule<} .
  var P : Parent .
  var N N' : Nat .

  sort CCState .
  op [_,_,_] : EquationSet Nat List{MRule<} -> CCState [ctor] .

  op rem-att : Nat EquationSet -> EquationSet .
  eq rem-att(N,ES) = rem-att(meta(N),ES) .

  op rem-att : AttrSet EquationSet -> EquationSet .
  eq rem-att(AS,(eq T = T' [AS] .) ES) = ES .
  eq rem-att(AS,ES) = ES [owise] .

  --- OUT: return List{MRule<} rewritten by module U with equations ES added
  op rewWithEqs : Module EquationSet List{MRule<} -> List{MRule<} .
  eq rewWithEqs(U,ES,MRL) = rewWithEqs(setEqs(U,ES),MRL) .

  op rewWithEqs : Module List{MRule<} -> List{MRule<} .
  eq rewWithEqs(U,(T M => T' M') MRL) =
    if getTerm(metaReduce(U,T)) == getTerm(metaReduce(U,T'))
      then nil
      else getTerm(metaReduce(U,T)) [0,'Q] =>  getTerm(metaReduce(U,T')) [0,'Q]
    fi rewWithEqs(U,MRL) .
  eq rewWithEqs(U,mt-mrule MRL) = rewWithEqs(U,MRL) .
  eq rewWithEqs(U,nil) = nil .

  op meta : Parent -> AttrSet .
  eq meta(none) = none .
  eq meta(N) = metadata(string(N,10)) [owise] .

  op left-simplify : Module Equation EquationSet -> [EquationSet] .
  eq left-simplify(U,E,ES) = left-simplify(addEqs(E,U),ES) .

  op left-simplify : Module EquationSet -> [EquationSet] .
  eq left-simplify(U,eq T = T' [AS] . ES) =
    (eq getTerm(metaReduce(U,T)) = T' [AS] .)
    left-simplify(U,ES) .
  eq left-simplify(U,none) = none .

  op rem-metadata-attr : EquationSet -> EquationSet .
  eq rem-metadata-attr(eq T = T' [AS]. ES) =
    eq T = T' [none].
    rem-metadata-attr(ES) .
  eq rem-metadata-attr(none) = none .

  op _state-equality_ : CCState CCState -> Bool .
  eq [ES,N,MRL] state-equality [ES',N',MRL'] =
    N   == N'   and-then
    MRL == MRL' and-then
    MRL == nil  and-then
    rem-metadata-attr(ES) == rem-metadata-attr(ES') .
endfm

fmod CONG-CLOSURE-SHARED is
  pr CONG-CLOSURE-SHARED-IMPL * (op simpl-mrule to sm,
                                 op reduce-imrules to ri) .
endfm
