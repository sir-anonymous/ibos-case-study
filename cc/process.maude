--- The main function is "reduce-imrules(T [n,S] => T' [m,S'],IMRL)" that yields the list of results
--- of simplifying rules "IMRL" with T [n,S] => T' [m,S'].  Each result is either: {i} if rule i was irreducible,
--- or [f,[i] mt.mrule] if it became trivial, or [f,[i] T'' [n',S''] => T''' [m',S''']  otherwise, with f the original rule's top.
---
--- The sort "Process" will be used as a data structure in congruence closure to process the results
--- obtained from "reduce-imrules(T [n,S] => T' [m,S'],IMRL)" in the context of the list of unprocessed rules.

fmod PROCESS is  pr MARKED-RULES .  pr SIMPLIFY-MARKED-TERM&RULE .
  sorts Result Results Process .  subsort Result < Results . subsort List{MRule<} < Process .

  op {_,_} : Qid IMRule -> Result [ctor] .
  op nil : -> Results [ctor] .
  op _ _ : Results Results -> Results [ctor assoc id: nil prec 25] .
  op {_} : Nat -> Result [ctor] .
  op _#_ : Results List{MRule<} -> Process [ctor] .

  op reduce-imrules : Module Module QidPairSet Substitution Bool MRule List{IMRule} -> Results .
  op reduce-imrule  : Module Module QidPairSet Substitution Bool MRule IMRule       -> Result .

  vars T T' T'' T''' : GroundTerm . vars i j n m k l : Nat . vars S S' S'' S''' : SetM{Qid} .
  var MR : MRule . var IMR : IMRule . var MRL : List{MRule<} . var IMRL : List{IMRule} .
  var U CU : Module . var ES : EquationSet . var B : Bool . var QPS : QidPairSet .
  var SUB : Substitution .

  eq nil # MRL = MRL .

  eq reduce-imrules(U,CU,QPS,SUB,B,T [n,S] => T' [m,S'],nil) = nil .
  eq reduce-imrules(U,CU,QPS,SUB,B,T [n,S] => T' [m,S'],IMR IMRL) = reduce-imrule (U,CU,QPS,SUB,B,T [n,S] => T' [m,S'],IMR)
                                                                reduce-imrules(U,CU,QPS,SUB,B,T [n,S] => T' [m,S'],IMRL) .

  eq reduce-imrule(U,CU,QPS,SUB,B,T [n,S] => T' [m,S'],[i] T'' [k,S''] => T''' [l,S''']) =
     if simpl-mterm(U,T [n,S] => T' [m,S'],T'' [k,S'']) == failure
        then if simpl-mterm(U,T [n,S] => T' [m,S'],T''' [l,S''']) == failure
                then {i}
                else {top(T''),[i] T'' [k,S''] => simpl-mterm(U,T [n,S] => T' [m,S'],T''' [l,S'''])}
             fi
        else if simpl-mterm(U,T [n,S] => T' [m,S'],T''' [l,S''']) == failure
                then {top(T''),[i] make-rule(U,CU,QPS,SUB,B,p1(simpl-mterm(U,T [n,S] => T' [m,S'],T'' [k,S''])),T''')}
                else {top(T''),[i] make-rule(U,CU,QPS,SUB,B,p1(simpl-mterm(U,T [n,S] => T' [m,S'],T'' [k,S''])),
                                             p1(simpl-mterm(U,T [n,S] => T' [m,S'],T''' [k,S'''])))}
             fi
     fi .
endfm
