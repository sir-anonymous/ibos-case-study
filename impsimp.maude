--- Module provides a variant unification-based clause simplifier;
--- given a clause set, the simplifier checks if any atoms in the antecedent of any clause
--- fall within the FVP fragment---if so, it unifies them and applies
--- the unifiers to the respective clause to generate a set of simpler clauses
--- NOTE: if FVP part has no unifiers, we generate the empty set of clauses
fmod VAR-UNIF-CLAUSE-SIMPLIFIER is
  pr FOFORMSET .              --- provides FOFormSets
  pr FOFORMSET-OPERATIONS .   --- provides wellFormed() for FOForm? and disj-join for FOForm?Set
  pr FOFORMSIMPLIFY .         --- provides simplify for FOForm?
  pr FOFORM-FILTER .          --- provides FOFormPairs, filter-disj
  pr NNF .                    --- provides toNNF()
  pr EQ-VARIANT .             --- provides var-unifiers()
  pr FOFORM-SUBSTITUTIONSET . --- provides _<<_ operator for SubstitutionSets
  pr UNIT-FM .                --- provides noModule
  pr VAR-UNIF-PARTIAL-FVP .

  op vu-clause-simp  : Module Disj? ~> QFForm? .
  op vu-clause-simp2 : Module FOFormPair PosDisj ~> QFForm? .
  ---
  var EA : EqAtom . var D1 D2 D3 : Disj?  . var ND : NegDisj . var N1 N2 : NegDisj? .
  var U  : Module . var PD : PosDisj . var DS : Disj?Set .
  --- INP: Module DisjSet (ClauseSet)
  --- PRE: Module has FVP
  --- OUT: DisjSet' where any FVP part of any clause has been solved
  eq vu-clause-simp(U,ND \/ PD)    = if U == noModule then ND \/ PD else vu-clause-simp2(U,filterDisjByPolicy(U,ND),PD) fi .
  eq vu-clause-simp(U,D1)          = D1 [owise] .
  eq vu-clause-simp2(U,(N1,N2),PD) = if N1 =/= mtForm then vu-clause-simp(U,simplify(disj-join((N2 \/ PD) << var-unifiers(U,toUnifProb(toNNF(~ N1)))))) else N1 \/ N2 \/ PD fi .
endfm

fmod IMP-SIMP is
  pr FOFORMSIMPLIFY .
  pr FOFORMREDUCE .
  pr FOFORM-EXTRACT-SUBSTITUTION .
  pr VAR-UNIF-CLAUSE-SIMPLIFIER .
  pr FOFORMSET-OPERATIONS .       --- provides DisjSet data structure and conversion in DisjSet
  pr CNF .                        --- provides toCNF()
  pr FOFORM-CORE-PRETTYPRINT .

  --- OUT: returns a simplified conjunction of disjunctions
  op imp-simp : Module Module Module QFForm -> QFForm .
  op imp-simp-conj : Module Module Module QFForm -> QFForm .
  op imp-simp-disj : Module Module Module Disj -> Disj .

  var RewMod VSMod SimpMod : Module .
  var F : QFForm .
  var F? G? : QFForm .
  var D : Disj .
  var TA : TruthAtom .
  var P : PosDisj . var N? : NegDisj? . var N : NegDisj .

  eq imp-simp(RewMod,VSMod,SimpMod,F) = simplify(imp-simp-conj(RewMod,VSMod,SimpMod,simplify(toCNF(F)))) .

  eq imp-simp-conj(RewMod,VSMod,SimpMod,TA) = TA .
  eq imp-simp-conj(RewMod,VSMod,SimpMod,D /\ F) = imp-simp-disj(RewMod,VSMod,SimpMod,D) /\ imp-simp-conj(RewMod,VSMod,SimpMod,F) .
  eq imp-simp-conj(RewMod,VSMod,SimpMod,D) = imp-simp-disj(RewMod,VSMod,SimpMod,D) .

  eq imp-simp-disj(RewMod,VSMod,SimpMod,D) =
    if imp-simp-impl(RewMod,VSMod,SimpMod,D) == D
      then D
      else imp-simp-conj(RewMod,VSMod,SimpMod,toCNF(imp-simp-impl(RewMod,VSMod,SimpMod,D)))
    fi .

  --- TODO: until fixed point is reached
  ---       [1] try to use variant unification to solve pieces: vu-clause-simp(VSMod,D)
  ---       [2] try to use substitution extraction to solve pieces
  ---       [3] rewrite with all lemmas, reducing to normal form: reduce(RewMod,false,D)
  ---       [4] apply generic implication simplification rules: downTerm(getTerm(metaReduce(SimpMod,upTerm(D))))
  --- If all else fails, turn LHS vars into constants and then... let the user see them I guess
  op imp-simp-impl : Module Module Module Disj -> [FOForm] .
  eq imp-simp-impl(RewMod,VSMod,SimpMod,D) =
    downTerm(modReduce(SimpMod,
      upTerm(reduce(RewMod,false,
               extract-clause-sub(RewMod,
                 vu-clause-simp(VSMod,D))))),error("imp-simp-impl1 failed")) .
endfm

fmod IMP-SIMP-BACKEND-IMPL is
  pr RLTOOL-BACKEND .
  pr IMP-SIMP .
  pr REACH-PROOF-STATE-OPS .

  var D : ProofMetadata .
  var MQL : ScopedMapList .
  var F : QFForm? .
  var M : Module .
  var ModArgs : ModuleList .

  eq checkVal((M,'impsimp,ModArgs),MQL,D,F) =
    if ModArgs :: Module then
      --- FIXME: set output back to false when we are done
      if @ppCNF(true,'tt.Pred,imp-simp(get-mod(D),getbackend('validity,'varsat,get-reg(D)),ModArgs,F)) == tt then true else nobool fi
      else errb('impsimp 'requires 'single 'module 'argument)
    fi .
  eq checkUnsat((M,'impsimp,ModArgs),MQL,D,F) = nobool .
endfm
