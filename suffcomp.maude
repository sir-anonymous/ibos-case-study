fmod WRAPPED-TERMLIST-SET is
  pr META-LEVEL .
  pr TERM-EXTRA .
  pr TYPE-EXTRA .
  pr TERMSET-FM .

  var U : Module .
  var TYL : TypeList .
  var NTL : NeTermList .
  var TL : TermList .
  var WTS : WTermListSet .
  var Q : Qid .

  sort WTermList WTermListSet .
  subsort WTermList < WTermListSet .
  ----------------------------------
  op {_} : TermList -> WTermList [ctor] .
  op __ : WTermListSet WTermListSet -> WTermListSet [ctor assoc comm id: .WTermListSet] .
  op .WTermListSet : -> WTermListSet [ctor] .

  op wellTyped : Module TypeList WTermListSet -> Bool .
  -----------------------------------------------------
  eq wellTyped(U,TYL,{TL} WTS)    = typeLeqS(U,termListTypes(U,TL),TYL) and-then wellTyped(U,TYL,WTS) .
  eq wellTyped(U,TYL,.WTermListSet) = true .

  op linear : WTermListSet -> Bool .
  ----------------------------------
  eq linear({TL} WTS)    = linear(TL) and-then linear(WTS) .
  eq linear(.WTermListSet) = true .

  op TermSet : Qid WTermListSet ~> TermSet .
  ------------------------------------------
  eq TermSet(Q,{NTL} WTS)     = (Q[NTL]) | TermSet(Q,WTS) .
  eq TermSet(Q,.WTermListSet) = emptyTermSet .
endfm

fmod COVERSET-AUTOMATON is
  --- pr SCC .
  pr WRAPPED-TERMLIST-SET .
  pr UNIT-FM .
  pr UNIQUE-PREFIX .

  var U : Module .
  var OP SP : String .
  var TYL : TypeList .
  var WTS : WTermListSet .
  var TL : TermList .

  op sca : Module -> Module .

  op csa : Module TypeList WTermListSet -> Module .
  -------------------------------------------------
 ceq csa(U,TYL,WTS) = sca(csa-mod(getSig(U),opPrefix(U),sortPrefix(U),TYL,WTS))
  if wellTyped(U,TYL,WTS) and-then linear(WTS) .

  op csa-mod : Module String String TypeList WTermListSet -> Module .
  -------------------------------------------------------------------
  eq csa-mod(U,OP,SP,TYL,WTS) =
    addOps(op qid(OP + "def") : TYL -> qid(SP + "tt") [none].
           op qid(OP + "tt")  : nil -> qid(SP + "tt") [ctor].,
      addSorts(qid(SP + "tt"),
        addEqs(cover-eqs(OP,SP,WTS),U))) .

  op cover-eqs : String String WTermListSet -> EquationSet .
  ----------------------------------------------------------
  eq cover-eqs(OP,SP,{TL} WTS) =
    (eq qid(OP + "def")[TL] = qid(OP + "tt." + SP + "tt") [none].)
    cover-eqs(OP,SP,WTS) .
  eq cover-eqs(OP,SP,.WTermListSet) = none .
endfm

fmod COVERING-EQUATIONSET is
  pr META-LEVEL .
  pr TERM-EXTRA .
  pr TERMSET-FM .
  pr EQ-FAMILY  .
  pr UNIFIERS   .
  pr WRAPPED-TERMLIST-SET .
  pr CONSTRAINED-TERMSET .
  pr CONSTRAINED-TERMSET-MATCH .

  var M : Module .
  var ES : EquationSet .
  var Q : Qid .
  var TYL : TypeList .
  var C C' : QFCTerm .
  var CS CS' : QFCTermSet .
  var U V : Term .
  var EC : EqCondition .
  var A : AttrSet .
  var CJ : Conj? .

  op covering-eqs : Module Qid TypeList QFCTermSet ~> QFCTermSet .
  op covering-eqs : Module Qid TypeList EqFamilyMap QFCTermSet ~> QFCTermSet .
  ----------------------------------------------------------------------------
  eq covering-eqs(M,Q,TYL,CS)                = covering-eqs(M,Q,TYL,getEqFamily(getEqFamilies(M),Q TYL),CS) .
  eq covering-eqs(M,Q,TYL,(Q,TYL) |-> ES,CS) = covering-eqs(M,ES,CS) .

  op covering-eqs : Module EquationSet QFCTermSet ~> QFCTermSet .
  op covering-eqs : Module EquationSet QFCTermSet QFCTermSet ~> QFCTermSet .
  --------------------------------------------------------------------------
  eq covering-eqs(M,ES,CS) = covering-eqs(M,ES,CS,noterm) .

  eq covering-eqs(M,ES,C | CS,CS') = covering-eqs(M,ES,CS,CS' | if anyMatches?(M,eq-to-cterm(ES),C) then noterm else C fi) .
  eq covering-eqs(M,ES,noterm,CS') = CS' .

  op anyMatches? : Module QFCTermSet QFCTerm -> Bool .
  ----------------------------------------------------
  eq anyMatches?(M,C | CS,C') = matches?(cterm-func(M),cterm-func(M,C),cterm-func(M,C')) or-else anyMatches?(M,CS,C') .
  eq anyMatches?(M,noterm,C') = false .

  op eq-to-cterm : EquationSet ~> QFCTermSet .
  op eq-to-cterm : EquationSet QFCTermSet ~> QFCTermSet .
  -------------------------------------------------------
  eq eq-to-cterm(ES) = eq-to-cterm(ES,noterm) .

  eq eq-to-cterm( eq U = V       [A]. ES,CS) = eq-to-cterm(ES,CS | (U | mtForm)) .
  eq eq-to-cterm(ceq U = V if EC [A]. ES,CS) = eq-to-cterm(ES,CS | (U | eqCond2Conj(EC,mtForm))) .
  eq eq-to-cterm(none,                   CS) = CS .

  op eqCond2Conj : EqCondition Conj? ~> Conj? .
  ---------------------------------------------
  eq eqCond2Conj(U = V /\ EC,CJ) = eqCond2Conj(EC,CJ /\ U ?= V) .
  eq eqCond2Conj(nil,        CJ) = CJ .
endfm

fmod SIMPLE-SUFFCOMP is
  pr TERMSET-FM .
  pr CONSTRAINED-TERMSET .
  pr COVERSET-AUTOMATON .
  pr OP-FAMILY .
  pr EQ-FAMILY .
  pr REMOVE-COMM .
  pr FOFORMSET .

  sort SuffCompTermTransform SuffCompTermTransformList .
  subsort SuffCompTermTransform < SuffCompTermTransformList .
  -----------------------------------------------------------
  op using_on_case_              : TermList Variable TermSet -> SuffCompTermTransform [ctor] .
  op using_with_split_           : TermList Term TermSet -> SuffCompTermTransform [ctor] .
  op using_with_split_equal_and_ : TermList Qid Type Variable Variable -> SuffCompTermTransform [ctor] .
  op using_unify-cond            : TermList -> SuffCompTermTransform [ctor] .
  op skip                        : -> SuffCompTermTransformList [ctor] .
  op _;;_ : SuffCompTermTransform SuffCompTermTransformList -> SuffCompTermTransformList [ctor] .

  sort SuffCompStrategy SuffCompStrategyList .
  subsort SuffCompStrategy < SuffCompStrategyList .
  -------------------------------------------------
  op handle`op_:_->_|_|_ : Qid TypeList Type WTermListSet SuffCompTermTransformList -> SuffCompStrategy [ctor] .
  op assert`op_:_->_     : Qid TypeList Type                                        -> SuffCompStrategy [ctor] .
  op _;;_ : SuffCompStrategy SuffCompStrategyList -> SuffCompStrategyList [ctor] .
  op nil  : -> SuffCompStrategyList [ctor] .

  op suffcomp : Module SuffCompStrategyList -> EqFamilyMap .
  op suffcomp : Module EqFamilyMap SuffCompStrategyList -> EqFamilyMap .
endfm
